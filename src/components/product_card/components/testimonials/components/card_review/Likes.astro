---
interface Props {
  reviewId: number
  likes: number
  dislikes: number
}

const { reviewId, likes, dislikes } = Astro.props
---

<div
  class="like-dislike-container mt-2 flex justify-end items-center gap-x-2"
  data-review-id={reviewId}
>
  <button
    type="button"
    class="like py-2 px-3 inline-flex items-center gap-x-2 text-sm font-medium rounded-lg border border-gray-200 bg-white text-gray-800 shadow-sm hover:bg-gray-50 disabled:opacity-50 disabled:pointer-events-none dark:bg-slate-900 dark:border-gray-700 dark:text-white dark:hover:bg-gray-800 dark:focus:outline-none dark:focus:ring-1 dark:focus:ring-gray-600"
  >
    <svg
      class="flex-shrink-0 w-4 h-4"
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      stroke-width="2"
      stroke-linecap="round"
      stroke-linejoin="round"
    >
      <path d="M7 10v12"></path>
      <path
        d="M15 5.88 14 10h5.83a2 2 0 0 1 1.92 2.56l-2.33 8A2 2 0 0 1 17.5 22H4a2 2 0 0 1-2-2v-8a2 2 0 0 1 2-2h2.76a2 2 0 0 0 1.79-1.11L12 2h0a3.13 3.13 0 0 1 3 3.88Z"
      ></path>
    </svg>
    <span class="likesSum">{likes > 0 && likes}</span>
  </button>
  <button
    type="button"
    data-dislikes={dislikes}
    class="dislike py-2 px-3 inline-flex items-center gap-x-2 text-sm font-medium rounded-lg border border-gray-200 bg-white text-gray-800 shadow-sm hover:bg-gray-50 disabled:opacity-50 disabled:pointer-events-none dark:bg-slate-900 dark:border-gray-700 dark:text-white dark:hover:bg-gray-800 dark:focus:outline-none dark:focus:ring-1 dark:focus:ring-gray-600"
  >
    <svg
      class="flex-shrink-0 w-4 h-4"
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      stroke-width="2"
      stroke-linecap="round"
      stroke-linejoin="round"
    >
      <path d="M17 14V2"></path>
      <path
        d="M9 18.12 10 14H4.17a2 2 0 0 1-1.92-2.56l2.33-8A2 2 0 0 1 6.5 2H20a2 2 0 0 1 2 2v8a2 2 0 0 1-2 2h-2.76a2 2 0 0 0-1.79 1.11L12 22h0a3.13 3.13 0 0 1-3-3.88Z"
      ></path>
    </svg>
  </button>
</div>

<script>
  document.querySelectorAll('.like-dislike-container').forEach((container) => {
    const like = container.querySelector('.like')
    const dislike = container.querySelector('.dislike')
    const reviewId = container.dataset.reviewId
    const likesSum = like.querySelector('.likesSum')
    let dislikesAmount = isNaN(Number(dislike.dataset.dislikes))
      ? 0
      : Number(dislike.dataset.dislikes)

    let isLiked = false
    let isDisliked = false

    let currentLikes = Number(likesSum.textContent) || 0

    // Восстановление состояния из localStorage
    const savedState = localStorage.getItem(`reviewState_${reviewId}`)
    if (savedState) {
      const { isLiked: savedIsLiked, isDisliked: savedIsDisliked } =
        JSON.parse(savedState)
      isLiked = savedIsLiked
      isDisliked = savedIsDisliked

      if (isLiked) {
        like.classList.add('bg-gray-200')
        like.classList.remove('bg-white')
        likesSum.textContent = currentLikes.toString()
      }

      if (isDisliked) {
        dislike.classList.add('bg-gray-200')
        dislike.classList.remove('bg-white')
      }
    }

    // Обработчик событий для лайка
    like.addEventListener('click', () => {
      if (isLiked) {
        // Снимаем лайк
        currentLikes -= 1
        like.classList.remove('bg-gray-200')
        like.classList.add('bg-white')
        isLiked = false
      } else {
        // Устанавливаем лайк
        if (isDisliked) {
          // Если был установлен дизлайк, снимаем его
          dislikesAmount -= 1
          dislike.classList.remove('bg-gray-200')
          dislike.classList.add('bg-white')
          isDisliked = false
        }
        currentLikes += 1
        like.classList.add('bg-gray-200')
        like.classList.remove('bg-white')
        isLiked = true
      }
      likesSum.textContent = currentLikes === 0 ? '' : currentLikes.toString()
      updateLikesDislikesState(reviewId, isLiked, isDisliked)
      sendLikesAmountToServer(reviewId, currentLikes, dislikesAmount)
    })

    // Обработчик событий для дизлайка
    dislike.addEventListener('click', () => {
      if (isDisliked) {
        // Снимаем дизлайк
        dislikesAmount -= 1
        dislike.classList.remove('bg-gray-200')
        dislike.classList.add('bg-white')
        isDisliked = false
      } else {
        // Устанавливаем дизлайк
        if (isLiked) {
          // Если был установлен лайк, снимаем его
          currentLikes -= 1
          like.classList.remove('bg-gray-200')
          like.classList.add('bg-white')
          isLiked = false
        }
        dislikesAmount += 1
        dislike.classList.add('bg-gray-200')
        dislike.classList.remove('bg-white')
        isDisliked = true
      }
      likesSum.textContent = currentLikes === 0 ? '' : currentLikes.toString()
      updateLikesDislikesState(reviewId, isLiked, isDisliked)
      sendLikesAmountToServer(reviewId, currentLikes, dislikesAmount)
    })
  })

  // Функция для обновления состояния в localStorage
  function updateLikesDislikesState(reviewId, isLiked, isDisliked) {
    const state = { isLiked, isDisliked }
    localStorage.setItem(`reviewState_${reviewId}`, JSON.stringify(state))
  }

  // Функция для отправки данных на сервер
  function sendLikesAmountToServer(reviewId, likes, dislikes) {
    console.log('Sending to server:', { reviewId, likes, dislikes })

    fetch('http://5.35.91.65/reviews/likes', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({ reviewId, likes, dislikes }),
    })
      .then((response) => {
        if (!response.ok) {
          throw new Error('Network response was not ok')
        }
        return response.json()
      })
      .then((result) => console.log(result))
      .catch((error) => {
        console.log('Error', error)
      })
  }
</script>
